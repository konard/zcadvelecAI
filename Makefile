.PHONY: checkallvars checkvars clean zcadenv zcadelectrotechenv version zcad zcadelectrotech afterzcadelectrotechbuild cleanzcad cleanzcadelectrotech installpkgstolaz zcadelectrotechpdfuseguide rmpkgslibs tests
default: cleanzcad

OSDETECT:=
ifeq ($(OS),Windows_NT)
	OSDETECT:=WIN32
else
	UNAME_S:=$(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		OSDETECT:=LINUX
	endif
	ifeq ($(UNAME_S),Darwin)
		OSDETECT:=OSX
	endif
endif

ZCVERSION:=
ifeq ($(wildcard .git),)
	ifeq ($(OSDETECT),WIN32)
		ZCVERSION:=$(shell type cad_source\zcadversion.notgit)
	else
		ZCVERSION:=$(shell cat cad_source/zcadversion.notgit)
	endif

else
	ZCVERSION:=$(shell git describe --tags) $(shell git symbolic-ref --short HEAD)
endif

QZCVERSION:='$(ZCVERSION)'

CPUDETECT:=
ifeq ($(OS),Windows_NT)
	ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)
		CPUDETECT:=AMD64
	endif
	ifeq ($(PROCESSOR_ARCHITECTURE),x86)
		CPUDETECT:=IA32
	endif
else
	UNAME_P := $(shell uname -p)
	ifeq ($(UNAME_P),x86_64)
		CPUDETECT:=AMD64
	endif
	ifneq ($(filter %86,$(UNAME_P)),)
		CPUDETECT:=IA32
	endif
	ifneq ($(filter arm%,$(UNAME_P)),)
		CPUDETECT:=ARM
	endif
endif

BUILDMODE:=default

BUILDPREFIX:=cad

INSTALLPREFIX:=NeedReplaceToDistribPath
ifeq ($(OSDETECT),WIN32)
	INSTALLPREFIX:=c:/Program\ Files/zcad
	BINPREFIX:=$(INSTALLPREFIX)
	CFGPREFIX:=c:/ProgramData/zcad
else
	ifeq ($(OSDETECT),LINUX)
		INSTALLPREFIX:=/var/lib/zcad
		BINPREFIX:=/bin
		CFGPREFIX:=/etc/zcad
	else
		ifeq ($(OSDETECT),OSX)
			INSTALLPREFIX:=/var/lib/zcad
			BINPREFIX:=/bin
			CFGPREFIX:=/etc/zcad
		else
			INSTALLPREFIX:=/var/lib/zcad
			BINPREFIX:=/bin
			CFGPREFIX:=/etc/zcad
		endif
	endif
endif

PATHDELIM:=/
ifeq ($(OSDETECT),WIN32)
	PATHDELIM:=\\
endif
PATHDELIM:=$(strip $(PATHDELIM))

PCP:=
ifeq ($(OSDETECT),WIN32)
	PCP:=$(LOCALAPPDATA)\lazarus
else
	ifeq ($(OSDETECT),LINUX)
		PCP:='~/.lazarus'
	else
		ifeq ($(OSDETECT),OSX)
			PCP:=~/.lazarus
		else
			PCP:=~/.lazarus
		endif
	endif
endif

LP:=
ifeq ($(OSDETECT),WIN32)
	LP:=C:\lazarus
else
	ifeq ($(OSDETECT),LINUX)
		LP:=/usr/bin
	else
		ifeq ($(OSDETECT),OSX)
			LP:=~/lazarus
		else
			LP:=~/lazarus
		endif
	endif
endif

ifeq ($(OSDETECT),WIN32)
	LAZBUILD:=$(LP)$(PATHDELIM)lazbuild.exe
else
	LAZBUILD:=$(LP)$(PATHDELIM)lazbuild
endif

ZP:=$(if $(wildcard $(LAZBUILD)),$(shell $(LAZBUILD) cad_source/zcad.lpi --quiet --pcp=$(PCP) --get-expand-text=$$\(ProjPath\)..$(PATHDELIM)$(BUILDPREFIX)$(PATHDELIM)bin$(PATHDELIM)$$\(TargetCPU\)-$$\(TargetOS\)),$())
ZPLATFORM:=$(if $(wildcard $(LAZBUILD)),$(shell $(LAZBUILD) cad_source/zcad.lpi --quiet --pcp=$(PCP) --get-expand-text=$$\(TargetCPU\)-$$\(TargetOS\)),$())

checkallvars: checkvars 
	@echo OSDETECT=$(OSDETECT)
	@echo CPUDETECT=$(CPUDETECT)

checkvars:
	@echo PCP=$(PCP)
	@echo LP=$(LP)
	@echo LAZBUILD=$(LAZBUILD)
# при первом запуске lazbuild на свежеустановленном lazarus
# это мешает генерации environmentoptions.pas, выделил ZP отдельно
#	@echo ZP=$(ZP)
	@echo INSTALLPREFIX=$(INSTALLPREFIX)

checkzpvar:
	@echo ZP=$(ZP)

clean:
	rm -rf cad_source/autogenerated/*
	rm -rf cad_source/autogenerated
	rm -rf $(BUILDPREFIX)/*
	rm -rf $(BUILDPREFIX)
	rm -rf lib/*
	rm -rf errors/*.bak
	rm -rf errors/*.dbpas

updatezcadenv: checkvars
	rm -rf $(BUILDPREFIX)/data/blocks
	rm -rf $(BUILDPREFIX)/cfg/components
	rm -rf $(BUILDPREFIX)/cfg/configs
	rm -rf $(BUILDPREFIX)/data/examples
	rm -rf $(BUILDPREFIX)/data/fonts
	rm -rf $(BUILDPREFIX)/data/images
	rm -rf $(BUILDPREFIX)/data/languages
	rm -rf $(BUILDPREFIX)/cfg/menu
	rm -rf $(BUILDPREFIX)/data/programdb
	rm -rf $(BUILDPREFIX)/data/template
	cp -r environment/runtimefiles/AllCPU-AllOS/common/* $(BUILDPREFIX)
	cp -r environment/runtimefiles/AllCPU-AllOS/zcad/* $(BUILDPREFIX)
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/common/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/common/* $(BUILDPREFIX)
endif
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/zcad/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/zcad/* $(BUILDPREFIX)
endif

updatezcadelectrotechenv: checkvars
	rm -rf $(BUILDPREFIX)/data/blocks
	rm -rf $(BUILDPREFIX)/cfg/components
	rm -rf $(BUILDPREFIX)/cfg/configs
	rm -rf $(BUILDPREFIX)/data/examples
	rm -rf $(BUILDPREFIX)/data/fonts
	rm -rf $(BUILDPREFIX)/data/images
	rm -rf $(BUILDPREFIX)/data/languages
	rm -rf $(BUILDPREFIX)/cfg/menu
	rm -rf $(BUILDPREFIX)/data/programdb
	rm -rf $(BUILDPREFIX)/data/template
	cp -r environment/runtimefiles/AllCPU-AllOS/common/* $(BUILDPREFIX)
	cp -r environment/runtimefiles/AllCPU-AllOS/zcadelectrotech/* $(BUILDPREFIX)
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/common/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/common/* $(BUILDPREFIX)
endif
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/zcadelectrotech/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/zcadelectrotech/* $(BUILDPREFIX)
endif

zcadenv: checkvars
	mkdir $(BUILDPREFIX)
	mkdir $(subst /,$(PATHDELIM),cad_source/autogenerated)
	cp -r environment/runtimefiles/AllCPU-AllOS/common/* $(BUILDPREFIX)
	cp -r environment/runtimefiles/AllCPU-AllOS/zcad/* $(BUILDPREFIX)
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/common/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/common/* $(BUILDPREFIX)
endif
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/zcad/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/zcad/* $(BUILDPREFIX)
endif
	echo create_file>cad_source/autogenerated/buildmode.inc
	rm -r cad_source/autogenerated/buildmode.inc

replaceinstallprefix:
ifeq ($(OSDETECT),WIN32)
	powershell -ex bypass -c "(Get-Content -Path '$(BUILDPREFIX)\cfg\configs\config.xml') -replace 'NeedReplaceToDistribPath','$(INSTALLPREFIX)' | Set-Content -Path '$(BUILDPREFIX)\cfg\configs\config.xml'"
else
	sed -i "s/NeedReplaceToDistribPath/$(shell printf '%s' "$(INSTALLPREFIX)" | sed 's/[]\/$*.^[]/\\&/g')/g" $(BUILDPREFIX)/cfg/configs/config.xml
endif

zcadelectrotechenv: checkvars
	mkdir $(BUILDPREFIX)
	mkdir $(subst /,$(PATHDELIM),cad_source/autogenerated)
	cp -r environment/runtimefiles/AllCPU-AllOS/common/* $(BUILDPREFIX)
	cp -r environment/runtimefiles/AllCPU-AllOS/zcadelectrotech/* $(BUILDPREFIX)
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/common/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/common/* $(BUILDPREFIX)
endif
ifneq ($(wildcard environment/runtimefiles/$(ZPLATFORM)/zcadelectrotech/*),)
	cp -r environment/runtimefiles/$(ZPLATFORM)/zcadelectrotech/* $(BUILDPREFIX)
endif
	echo create_file>cad_source/autogenerated/buildmode.inc
	rm -r cad_source/autogenerated/buildmode.inc

version:
	echo ZCAD Version: $(ZCVERSION)
	echo quoted ZCAD Version: $(QZCVERSION)
#	@echo $(QZCVERSION) > cad_source/zcadversion.inc
ifeq ($(OSDETECT),WIN32)
	cmd.exe "/C echo '$(ZCVERSION)' > cad_source/zcadversion.inc"
else
	echo \'$(ZCVERSION)\' > cad_source/zcadversion.inc
endif
	@echo $(ZCVERSION) > cad_source/zcadversion.txt

ifneq ($(wildcard .git),)
ifeq ($(OSDETECT),WIN32)
	$(shell git describe --tags --abbrev=0 > cad_source\zcadversion.notgit)
else
	$(shell git describe --tags --abbrev=0 > cat cad_source/zcadversion.notgit)
endif
endif

zcad: checkvars version installpkgstolaz
	$(LAZBUILD) --pcp=$(PCP) cad_source/utils/typeexporter.lpi
	environment/typeexporter/typeexporter pathprefix=cad_source/ outputfile=$(BUILDPREFIX)/data/rtl/system.pas processfiles=environment/typeexporter/zcad.files
	$(LAZBUILD) --pcp=$(PCP) --bm=$(BUILDMODE) cad_source/zcad.lpi

zcadelectrotech: checkvars version installpkgstolaz
	$(LAZBUILD) --pcp=$(PCP) cad_source/utils/typeexporter.lpi
	environment/typeexporter/typeexporter pathprefix=cad_source/ outputfile=$(BUILDPREFIX)/data/rtl/system.pas processfiles=environment/typeexporter/zcad.files+environment/typeexporter/zcadelectrotech.files define=ELECTROTECH
	$(LAZBUILD) --pcp=$(PCP) --bm=$(BUILDMODE) cad_source/zcad.lpi

afterzcadelectrotechbuild: checkallvars checkzpvar version
	$(ZP)/zcad nosplash runscript $(BUILDPREFIX)/cfg/components/afterbuild.cmd
$(BUILDPREFIX):
	mkdir $(BUILDPREFIX)
$(BUILDPREFIX)/data:
	mkdir $(subst /,$(PATHDELIM),$(BUILDPREFIX)/data)
$(BUILDPREFIX)/data/help: $(BUILDPREFIX) $(BUILDPREFIX)/data
	mkdir $(subst /,$(PATHDELIM),$(BUILDPREFIX)/data/help)
$(BUILDPREFIX)/data/help/locale: $(BUILDPREFIX) $(BUILDPREFIX)/data $(BUILDPREFIX)/data/help
	mkdir $(subst /,$(PATHDELIM),$(BUILDPREFIX)/data/help/locale)
$(BUILDPREFIX)/data/help/locale/ru: $(BUILDPREFIX) $(BUILDPREFIX)/data $(BUILDPREFIX)/data/help $(BUILDPREFIX)/data/help/locale
	mkdir $(subst /,$(PATHDELIM),$(BUILDPREFIX)/data/help/locale/ru)
$(BUILDPREFIX)/data/help/locale/ru/_images: $(BUILDPREFIX) $(BUILDPREFIX)/data $(BUILDPREFIX)/data/help $(BUILDPREFIX)/data/help/locale $(BUILDPREFIX)/data/help/locale/ru
	mkdir $(subst /,$(PATHDELIM),$(BUILDPREFIX)/data/help/locale/ru/_images)

documentation: checkvars $(BUILDPREFIX) $(BUILDPREFIX)/data $(BUILDPREFIX)/data/help $(BUILDPREFIX)/data/help/locale $(BUILDPREFIX)/data/help/locale/ru $(BUILDPREFIX)/data/help/locale/ru/_images
	$(MAKE) -C cad_source/docs/userguide all
	cp cad_source/docs/userguide/*.html $(BUILDPREFIX)/data/help
	cp cad_source/docs/userguide/*.pdf $(BUILDPREFIX)/data/help
	cp -r cad_source/docs/userguide/locale/ru/_images/* $(BUILDPREFIX)/data/help/locale/ru/_images

rmsrcbackups:
	$(MAKE) -C cad_source/ rmsrcbackups

rmpkgslibs:
	$(MAKE) -C cad_source/ rmpkgslibs

tests: checkvars
	$(MAKE) -C cad_source/components/zcontainers/tests LP=$(LP) PCP=$(PCP) clean all
	$(MAKE) -C cad_source/zengine/tests LP=$(LP) PCP=$(PCP) clean all

updatelocalizedpofiles: checkvars
	cp $(BUILDPREFIX)/data/languages/rtzcad.po $(BUILDPREFIX)/data/languages/rtzcad.pot
	$(LP)$(PATHDELIM)tools$(PATHDELIM)updatepofiles $(BUILDPREFIX)/data/languages/rtzcad.pot
	rm -rf $(BUILDPREFIX)/data/languages/rtzcad.pot
	cp $(LP)$(PATHDELIM)lcl/languages/*.po $(BUILDPREFIX)/data/languages
	cp $(LP)$(PATHDELIM)components/anchordocking/languages/*.po $(BUILDPREFIX)/data/languages

cleanzcad: clean zcadenv replaceinstallprefix zcad

cleanzcadelectrotech: clean zcadelectrotechenv replaceinstallprefix zcadelectrotech

submodulesinitupdate:
ifeq ($(OSDETECT),WIN32)
	$(error Submodules not found. Try "git submodule update --init --recursive")
endif
	git submodule update --init --recursive
cad_source/components/fpdwg/fpdwg.lpk:
	${MAKE} submodulesinitupdate
cad_source/other/agraphlaz/lazarus/ag_graph.lpk:
	${MAKE} submodulesinitupdate
cad_source/components/metadarkstyle/metadarkstyle.lpk:
	${MAKE} submodulesinitupdate
cad_source/components/zmacros/zmacros.lpk:
	${MAKE} submodulesinitupdate
cad_source/components/ztoolbars/ztoolbars.lpk:
	${MAKE} submodulesinitupdate
cad_source/components/fpspreadsheet/laz_fpspreadsheet.lpk:
	${MAKE} submodulesinitupdate
cad_source/components/lape/package/lape.lpk:
	${MAKE} submodulesinitupdate
cad_source/components/zreaders/zreaders.lpk:
	${MAKE} submodulesinitupdate
cad_source/components/callstack_memprofiler/source/callstack_memprofiler.pas:
	${MAKE} submodulesinitupdate
cad_source/components/fphunspell/fphunspell.lpk:
	${MAKE} submodulesinitupdate

checksubmodules: cad_source/components/fpdwg/fpdwg.lpk cad_source/other/agraphlaz/lazarus/ag_graph.lpk cad_source/components/metadarkstyle/metadarkstyle.lpk cad_source/components/zmacros/zmacros.lpk cad_source/components/ztoolbars/ztoolbars.lpk cad_source/components/fpspreadsheet/laz_fpspreadsheet.lpk cad_source/components/lape/package/lape.lpk cad_source/components/zreaders/zreaders.lpk cad_source/components/callstack_memprofiler/source/callstack_memprofiler.pas cad_source/components/fphunspell/fphunspell.lpk
	@echo All submodules found!

checkandinstallpckgifneed:
ifeq ($(OSDETECT),WIN32)
ifneq ($(findstring $(notdir $(LPK)),$(shell type $(PCP)\packagefiles.xml)),)
	@echo Package $(notdir $(LPK)) already installed
else
	@echo Install package $(notdir $(LPK))
	$(LAZBUILD) --pcp=$(PCP) --add-package $(LPK)
endif
else
ifneq ($(findstring $(notdir $(LPK)),$(shell cat $(PCP)/packagefiles.xml)),)
	@echo Package $(notdir $(LPK)) already installed
else
	@echo Install package $(notdir $(LPK))
	$(LAZBUILD) --pcp=$(PCP) --add-package $(LPK)
endif
endif

checkandcompilepckgifneed:
ifeq ($(OSDETECT),WIN32)
ifneq ($(findstring $(notdir $(LPK)),$(shell type $(PCP)\packagefiles.xml)),)
	@echo Package $(notdir $(LPK)) already installed
else
	@echo Install package $(notdir $(LPK))
	$(LAZBUILD) --pcp=$(PCP) $(LPK)
endif
else
ifneq ($(findstring $(notdir $(LPK)),$(shell cat $(PCP)/packagefiles.xml)),)
	@echo Package $(notdir $(LPK)) already installed
else
	@echo Install package $(notdir $(LPK))
	$(LAZBUILD) --pcp=$(PCP) $(LPK)
endif
endif

installpkgstolaz: checkvars checksubmodules rmpkgslibs
ifneq ($(OSDETECT),OSX)
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)other$(PATHDELIM)agraphlaz$(PATHDELIM)lazarus$(PATHDELIM)ag_graph.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)other$(PATHDELIM)agraphlaz$(PATHDELIM)lazarus$(PATHDELIM)ag_graph.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)other$(PATHDELIM)agraphlaz$(PATHDELIM)lazarus$(PATHDELIM)ag_math.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)other$(PATHDELIM)agraphlaz$(PATHDELIM)lazarus$(PATHDELIM)ag_vectors.lpk
endif
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)other$(PATHDELIM)uniqueinstance$(PATHDELIM)uniqueinstance_package.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)metadarkstyle$(PATHDELIM)metadarkstyle.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zcontainers$(PATHDELIM)zcontainers.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zbaseutils$(PATHDELIM)zbaseutils.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zbaseutilsgui$(PATHDELIM)zbaseutilsgui.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zebase$(PATHDELIM)zebase.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zcontrols$(PATHDELIM)zcontrols.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zmacros$(PATHDELIM)zmacros.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zmath$(PATHDELIM)zmath.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zobjectinspector$(PATHDELIM)zobjectinspector.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zscriptbase$(PATHDELIM)zscriptbase.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zscript$(PATHDELIM)zscript.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)ztoolbars$(PATHDELIM)ztoolbars.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zundostack$(PATHDELIM)zundostack.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)fpdwg$(PATHDELIM)fpdwg.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)fpspreadsheet$(PATHDELIM)laz_fpspreadsheet_visual_dsgn.lpk
	${MAKE} checkandcompilepckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)lape$(PATHDELIM)package$(PATHDELIM)lape.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)zreaders$(PATHDELIM)zreaders.lpk
	${MAKE} checkandinstallpckgifneed LPK=cad_source$(PATHDELIM)components$(PATHDELIM)fphunspell$(PATHDELIM)fphunspell.lpk
#	$(LAZBUILD) --pcp=$(PCP) --build-ide=""

install: installdata installcfg installbinary

uninstall: uninstallbinary uninstallcfg uninstalldata

installdata:
ifeq ($(wildcard $(INSTALLPREFIX)),)
	mkdir "$(subst \ , ,$(INSTALLPREFIX))"
endif
	cp -r $(BUILDPREFIX)/data/* "$(subst \ , ,$(INSTALLPREFIX))"
ifneq ($(OSDETECT),WIN32)
	chmod -R 655 $(INSTALLPREFIX)
endif

uninstalldata:
ifneq ($(wildcard $(INSTALLPREFIX)),)
	rm -rf "$(subst \ , ,$(INSTALLPREFIX))"
endif

installcfg:
ifeq ($(wildcard $(CFGPREFIX)),)
	mkdir "$(CFGPREFIX)"
endif
	cp -r "$(BUILDPREFIX)/cfg/*" "$(CFGPREFIX)"
ifneq ($(OSDETECT),WIN32)
	chmod -R 655 "$(CFGPREFIX)"
endif

uninstallcfg:
	rm -rf "$(CFGPREFIX)"

installbinary: checkallvars
ifneq ($(OSDETECT),WIN32)
	cp $(BUILDPREFIX)/bin/zcad "$(BINPREFIX)/zcad"
	chmod -R 755 "$(BINPREFIX)/zcad"
else
ifeq ($(wildcard $(BINPREFIX)/bin),)
	mkdir "$(subst \ , ,$(INSTALLPREFIX))/bin"
endif
	cp -r $(BUILDPREFIX)/bin/* "$(subst \ , ,$(BINPREFIX))/bin"
endif

uninstallbinary:
ifneq ($(OSDETECT),WIN32)
	rm "$(BINPREFIX)/zcad"
else
	rm -rf "$(subst \ , ,$(BINPREFIX))/bin"
endif
